<%- include('partials/header', { title: 'All Anime - ZANNIME' }) %>
<div class="container">
  <h1 class="mt-4">All Anime</h1>
  <input type="text" id="searchInput" class="form-control mb-4" placeholder="Search anime...">
  <div id="searchResults">
    <table class="table table-striped">
      <thead>
        <tr>
          <th>Judul</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <% animes.slice(0, 20).forEach(anime => { %>
          <tr>
            <td><%= anime.title %></td>
            <td>
              <a href="/<%= locals.currentSource %>/anime/<%= anime.animeId %>" class="btn btn-dark btn-sm">View</a>
            </td>
          </tr>
        <% }) %>
      </tbody>
    </table>
  </div>
  <nav aria-label="Page navigation">
    <ul class="pagination justify-content-center" id="pagination"></ul>
  </nav>
</div>
<%- include('partials/footer') %>
<script src="/js/bootstrap.bundle.min.js"></script>
<script>
  let currentPage = 1;
  const limit = 20;

  function fetchData(query = '', page = 1) {
    const resultsContainer = document.getElementById('searchResults');
    const paginationContainer = document.getElementById('pagination');
    const url = new URL(window.location);
    url.searchParams.set('q', query);
    url.searchParams.set('page', page);
    history.pushState({}, '', url);

    if (query.trim() === '') {
      fetch(`/all-anime-ajax?page=${page}&limit=${limit}`)
        .then(response => response.json())
        .then(data => {
          updateResults(data.results, resultsContainer);
          updatePagination(data.currentPage, data.totalPages, paginationContainer);
        });
    } else {
      fetch(`/search-ajax?q=${query}&page=${page}&limit=${limit}`)
        .then(response => response.json())
        .then(data => {
          updateResults(data.results, resultsContainer);
          updatePagination(data.currentPage, data.totalPages, paginationContainer);
        });
    }
  }

  document.getElementById('searchInput').addEventListener('input', function(e) {
    const query = e.target.value;
    fetchData(query, 1);
  });

  function updateResults(results, container) {
    container.innerHTML = '';
    const table = document.createElement('table');
    table.className = 'table table-striped';
    const thead = document.createElement('thead');
    const trHead = document.createElement('tr');
    ['Judul', 'Action'].forEach(text => {
      const th = document.createElement('th');
      th.textContent = text;
      trHead.appendChild(th);
    });
    thead.appendChild(trHead);
    table.appendChild(thead);

    const tbody = document.createElement('tbody');
    results.forEach(result => {
      const tr = document.createElement('tr');
      const tdJudul = document.createElement('td');
      tdJudul.textContent = result.title;
      tr.appendChild(tdJudul);

      const tdAction = document.createElement('td');
      const viewLink = document.createElement('a');
      const currentSource = '<%= locals.currentSource %>';
      viewLink.href = `/${currentSource}/anime/${result.animeId}`;
      viewLink.className = 'btn btn-dark btn-sm';
      viewLink.textContent = 'View';
      tdAction.appendChild(viewLink);
      tr.appendChild(tdAction);

      tbody.appendChild(tr);
    });
    table.appendChild(tbody);
    container.appendChild(table);
  }

  function updatePagination(currentPage, totalPages, container) {
    container.innerHTML = '';
    const maxPages = 5;
    const halfMaxPages = Math.floor(maxPages / 2);
    let startPage = Math.max(1, currentPage - halfMaxPages);
    let endPage = Math.min(totalPages, startPage + maxPages - 1);

    if (endPage - startPage < maxPages - 1) {
      startPage = Math.max(1, endPage - maxPages + 1);
    }

    const prevPage = currentPage > 1 ? currentPage - 1 : null;
    const nextPage = currentPage < totalPages ? currentPage + 1 : null;

    const prevLi = document.createElement('li');
    prevLi.className = `page-item ${prevPage ? '' : 'disabled'}`;
    const prevLink = document.createElement('a');
    prevLink.className = `page-link ${prevPage ? 'bg-dark text-white' : 'bg-secondary text-white'} border-dark`;
    prevLink.href = '#';
    prevLink.textContent = 'Previous';
    prevLink.addEventListener('click', () => {
      if (prevPage) fetchData(document.getElementById('searchInput').value, prevPage);
    });
    prevLi.appendChild(prevLink);
    container.appendChild(prevLi);

    for (let i = startPage; i <= endPage; i++) {
      const li = document.createElement('li');
      li.className = `page-item ${i === currentPage ? 'active' : ''}`;
      const a = document.createElement('a');
      a.className = `page-link ${i === currentPage ? 'bg-dark text-white' : 'bg-white text-dark'} border-dark`;
      a.href = '#';
      a.textContent = i;
      a.addEventListener('click', () => {
        fetchData(document.getElementById('searchInput').value, i);
      });
      li.appendChild(a);
      container.appendChild(li);
    }

    const nextLi = document.createElement('li');
    nextLi.className = `page-item ${nextPage ? '' : 'disabled'}`;
    const nextLink = document.createElement('a');
    nextLink.className = `page-link ${nextPage ? 'bg-dark text-white' : 'bg-secondary text-white'} border-dark`;
    nextLink.href = '#';
    nextLink.textContent = 'Next';
    nextLink.addEventListener('click', () => {
      if (nextPage) fetchData(document.getElementById('searchInput').value, nextPage);
    });
    nextLi.appendChild(nextLink);
    container.appendChild(nextLi);
  }

  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('searchInput');
    const urlParams = new URLSearchParams(window.location.search);
    const initialQuery = urlParams.get('q') || '';
    searchInput.value = initialQuery;
    const initialPage = urlParams.get('page') || 1;
    fetchData(initialQuery, initialPage);
  });
</script>
</body>
</html>